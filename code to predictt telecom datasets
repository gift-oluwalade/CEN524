import pandas as pd

# Load training and test datasets
train_df = pd.read_csv("custm1_training.csv")
test_df = pd.read_csv("test_telecom_customers.csv")

from sklearn.preprocessing import LabelEncoder

# Convert year of birth to age
train_df['Age'] = 2025 - train_df['year_of_birth']
test_df['Age'] = 2025 - test_df['year_of_birth']

# Drop original Year_of_Birth
train_df.drop(columns=['year_of_birth'], inplace=True)
test_df.drop(columns=['year_of_birth'], inplace=True)

# Encode categorical features
cat_features = ['mobile_type', 'system_status']
encoders = {}

for col in cat_features:
    le = LabelEncoder()
    train_df[col] = le.fit_transform(train_df[col])
    test_df[col] = le.transform(test_df[col])
    encoders[col] = le


# Encode the target
target_encoder = LabelEncoder()
train_df['value_segment'] = target_encoder.fit_transform(train_df['value_segment'])

from sklearn.ensemble import RandomForestClassifier

# Features and target
X_train = train_df[['mobile_type', 'system_status', 'Age']]
y_train = train_df['value_segment']

# Train the model
clf = RandomForestClassifier(random_state=42)
clf.fit(X_train, y_train)

# Prepare test data
X_test = test_df[['mobile_type', 'system_status', 'Age']]

# Predict
test_df['Predicted_value_segment'] = target_encoder.inverse_transform(clf.predict(X_test))

# Save predictions
test_df.to_csv("test_telecom_customers_with_predictions.csv", index=False)
print("âœ… Predictions saved to 'test_telecom_customers_with_predictions.csv'")
